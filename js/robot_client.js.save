control_id = getUrlVars()["control_id"];




my_id = getUrlVars()["robot_id"];

if (typeof control_id == 'undefined')
    control_id = "admin";
if (typeof my_id == 'undefined')
    my_id = "someid4";

function getUrlVars() {
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m, key, value) {
        vars[key] = value;
    });
    return vars;
}

// Compatibility shim
navigator.


getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

// PeerJS object
var peer = new Peer(my_id, {
    // Set API key for cloud server (you don't need this if you're running your
    // own.

    // Set highest debug level (log everything!)
    debug: 3,
    host: '192.168.0.233',
    port: 9000,
    // Set a logging function:
    logFunction: function() {
        var copy = Array.prototype.slice.call(arguments).join(' ');
        $('.log').append(copy + '<br>');
    }
});


peer.on('open', function() {
    $('#my-id').text(peer.id);
	console.log("testing");
	step1();
});

peer.on('close', function()
{
 	console.log("test");
	step1();
});


// Receiving a call
peer.on('call', function(call) {
    // Answer the call automatically (instead of prompting user) for demo purposes
    call.answer(window.localStream);
    console.log(call);
    step3(call);
});

peer.on('error', function(err) {
    //alert(err.message);
    // Return to step 2 if error occurs
    step1();
});

// Click handlers setup
$(function() {
    $('#make-call').click(function() {
        // Initiate a call!
        console.log("testing1");
        console.log($('#callto-id').val());
        var call = peer.call($('#callto-id').val(), window.localStream);
        console.log("test4")
        step3(call);
        console.log("test5")
    });

    $('#end-call').click(function() {
        window.existingCall.close();
        step1();
    });

    // Retry if getUserMedia fails
    $('#step1-retry').click(function() {
        $('#step1-error').hide();
        step1();
    });

    // Get things started
    step1();
});

function step1() {
    var constraints = { audio: true, video: { width: 160, height: 100 } };
    navigator.getUserMedia(constraints,
        function(stream) {
            var video = document.getElementById('my-video');
            video.src = window.URL.createObjectURL(stream);
            window.localStream = stream;
            step2();
	    var url = "https://" + location.host + ":8443/robotportal/main/saveRecording.do?server=wss://192.168.0.247:9090";
	    console.log(url); 
		
            //saveVideoStream(stream);
        },
        function(err) {
            console.log("The following error occurred: " + err.name);
        }
    );
}
// Get audio/video stream
// navigator.getUserMedia({
//    audio: true,
//   video: true
//}, function(stream) {
// Set your video displays
//   $('#my-video').prop('src', URL.createObjectURL(stream));

//  window.localStream = stream;

//step2();

// Save the video
// saveVideoStream(stream);

//}, function() {
//   $('#step1-error').show();
// });
//}

function step2() {
    $('#step1, #step3').hide();
    $('#step2').show();
}

function step3(call) {
    // Hang up on an existing call if present
    if (window.existingCall) {
        window.existingCall.close();
    }

    // Wait for stream on the call, then set peer video display
    call.on('stream', function(stream) {
        $('#my-video').prop('src', URL.createObjectURL(stream));
    });

    // UI stuff
    window.existingCall = call;
    $('#their-id').text(call.peer);
    call.on('close', step1);
    //$('#step1, #step2').hide();
    $('#step3').show();
}


chat_listener.subscribe(function(message) {
    var str = message.data;
    console.log(str); 
    var var1_obj = JSON.parse(str);
    console.log(var1_obj)
        //insertText("IsEanble", var1_obj.parameters.ENABLE)
    type = var1_obj.TYPE;
    action = var1_obj.ACTION;
    if (type == 1 && action == 1) {
	var calltoid = control_id + my_id;
	console.log(calltoid); 
        var call = peer.call(calltoid, window.localStream);
        step3(call);
    }
});

function saveVideoStream(stream) {
    var mediaRecorder = new MediaStreamRecorder(stream);
    mediaRecorder.mimeType = 'video/mp4';
    mediaRecorder.ondataavailable = function(blob) {
	"use strict";
        // Set timestamp for video
        var timestamp = new Date();
        timestamp.getHours();
        timestamp.getMinutes();
        timestamp.getSeconds();

        var filename = timestamp + '.mp4';

        // Create download to local
        let a = document.createElement("a");
        let blobURL = URL.createObjectURL(blob);
        a.href = blobURL;
        a.download = filename; // Use timestamp as filename
        document.body.appendChild(a);
        a.click();

        // Create request to send video to server
        function backupVideo(filename) {
	    var url = "https://" + location.host + ":8443/robotportal/main/saveRecording.do?server=wss://192.168.0.247:9090";

            var APIurl = 'https://192.168.0.233:8443/robotportal/main/saveRecording.do?server=wss://192.168.0.247:9090';
            var formData = new FormData();
            formData.append("recording", blob, filename)

            var xhr = new XMLHttpRequest();
            xhr.open("POST", APIurl, true);
            xhr.onload = function() {
                console.log(xhr.responseText);
            };
            xhr.send(formData);
        }

        backupVideo(filename);

        // Release references
        setTimeout(function() {
            document.body.removeChild(a);
            window.URL.revokeObjectURL(blobURL);
        }, 0);
    };

    // Set timesplice for every 10 seconds
    mediaRecorder.start(10000);
}
